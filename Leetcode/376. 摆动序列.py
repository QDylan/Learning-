# -*- coding: utf-8 -*-
"""
 @Time    : 2020/6/30 16:21
 @Author  : QDY
 @FileName: 376. 摆动序列.py

    如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为摆动序列。
    第一个差（如果存在的话）可能是正数或负数。少于两个元素的序列也是摆动序列。
    例如， [1,7,4,9,2,5] 是一个摆动序列，因为差值 (6,-3,5,-7,3) 是正负交替出现的。
    相反, [1,4,7,2,5] 和 [1,7,4,5,5] 不是摆动序列，
    第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。

    给定一个整数序列，返回作为摆动序列的最长子序列的长度。
    通过从原始序列中删除一些（也可以不删除）元素来获得子序列，剩下的元素保持其原始顺序。

    示例 1:
    输入: [1,7,4,9,2,5]
    输出: 6
    解释: 整个序列均为摆动序列。

    示例 2:
    输入: [1,17,5,10,13,15,10,5,16,8]
    输出: 7
    解释: 这个序列包含几个长度为 7 摆动序列，其中一个可为[1,17,10,13,10,16,8]。

    示例 3:
    输入: [1,2,3,4,5,6,7,8,9]
    输出: 2

    进阶:
    你能否用 O(n) 时间复杂度完成此题?

"""


class Solution:
    def wiggleMaxLength(self, nums):
        n = len(nums)
        if n <= 1: return n

        # 动态规划：
        # up[i]记录以nums[i]作为上升结尾的子序列的最长长度
        # down[i]记录以nums[i]作为下降结尾的子序列的最长长度
        # 若nums[i]>nums[i-1],说明是在上升中,前一个元素一定是要下降的，up = down+1
        # 若nums[i]<nums[i-1]，说明是在下降中，前一个元素一定是要上升的，down = up+1
        # 若相等，则保持不变（相当于没有这个数）
        # up, down = 1,1
        # for i in range(1,n):
        #     if nums[i]>nums[i-1]:
        #         up = down + 1
        #     elif nums[i]<nums[i-1]:
        #         down = up + 1
        # return max(down,up)

        # 贪心算法
        # prev_sgn记录以nums[i-1]结尾的子序列的摆动状态
        # >=0：上升， <=0：下降
        # 若当前nums[i]对比nums[i-1]是上升的且以nums[i-1]结尾是下降的，则最长子序列长度可以+1
        # 同理。。。
        prev_sgn = nums[1] - nums[0]
        cnt = 2 if prev_sgn != 0 else 1
        for i in range(2, n):
            sgn = nums[i] - nums[i - 1]
            if (sgn > 0 and prev_sgn <= 0) or (sgn < 0 and prev_sgn >= 0):
                cnt += 1
                prev_sgn = sgn
        return cnt
